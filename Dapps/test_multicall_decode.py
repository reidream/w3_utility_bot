import os
import json
from dotenv import load_dotenv
from uniswap_utility import Uniutility

# 環境変数の読み込み
load_dotenv('web3.env')

# 設定定数
CHAIN = "arbitrum"
RPC_URL = os.getenv("INFURA_URL")
RPC_KEY = os.getenv("RPC_KEY")
USER_ADDRESS = os.getenv("ADDRESS")

def main():
   """
   Uniswap V3のmulticallデコード機能をサンプルデータを使用してデモンストレーションします。
   """
   # Uniswap utilityの初期化
   uni_bot = Uniutility(
       rpc_url=RPC_URL,
       rpc_key=RPC_KEY,
       chain=CHAIN,
       user_address=USER_ADDRESS
   )

   # サンプル1: exactInputSingleを使用したシンプルなマルチコール
   test_input_data_1 = '0x5ae401dc00000000000000000000000000000000000000000000000000000000671d2a2200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000dc333239245ebbc6b656ace7c08099aa415585d10000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000002dd20955e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
   print("\n=== サンプル1: シンプルなマルチコール ===")
   print("単一のトークンスワップを実行するトランザクション")
   uni_bot.decode_multicall(test_input_data_1)

   # サンプル2: exactInputとunwrapWETH9を組み合わせた複雑なマルチコール
   test_input_data_2 = '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104b858183f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000007a5d18300000000000000000000000000000000000000000000000000b48d14f95e39d8000000000000000000000000000000000000000000000000000000000000002baf88d065e77c8cc2239327c5edb3a432268e58310001f482af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000b48d14f95e39d80000000000000000000000004c2ed46a52e58f25017638b340e62aeb68458cb800000000000000000000000000000000000000000000000000000000'
   print("\n=== サンプル2: 複雑なマルチコール ===")
   print("トークンスワップとWETHのアンラップを組み合わせたトランザクション")
   uni_bot.decode_multicall(test_input_data_2)

   # サンプル２ではpathが[address,uint,address]のため特殊なため、パスデータのデコード関数使用
   path = b"\xaf\x88\xd0e\xe7|\x8c\xc2#\x93'\xc5\xed\xb3\xa42&\x8eX1\x00\x01\xf4\x82\xafID}\x8a\x07\xe3\xbd\x95\xbd\rV\xf3RAR?\xba\xb1"
   print("\n=== サンプル3: パスデータのデコード ===")
   print("トークンアドレスと手数料率を含むパスデータの解析")
   uni_bot.decode_multicall_path(path)

if __name__ == "__main__":
   main()